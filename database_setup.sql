-- Create LIBRARY_USERS table for authentication
CREATE TABLE LIBRARY_USERS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USERNAME VARCHAR2(50) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(100) NOT NULL,
    ROLE VARCHAR2(20) DEFAULT 'USER' NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create BOOKS table
CREATE TABLE BOOKS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TITLE VARCHAR2(200) NOT NULL,
    AUTHOR VARCHAR2(100) NOT NULL,
    ISBN VARCHAR2(13) UNIQUE NOT NULL,
    CATEGORY VARCHAR2(50) NOT NULL,
    QUANTITY NUMBER DEFAULT 1 NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create LIBRARY_MEMBERS table
CREATE TABLE LIBRARY_MEMBERS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    PHONE VARCHAR2(20) NOT NULL,
    ADDRESS VARCHAR2(200),
    JOIN_DATE DATE DEFAULT CURRENT_DATE,
    STATUS VARCHAR2(20) DEFAULT 'ACTIVE' NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create BOOK_LOANS table for tracking borrowed books
CREATE TABLE BOOK_LOANS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    BOOK_ID NUMBER NOT NULL,
    MEMBER_ID NUMBER NOT NULL,
    BORROW_DATE DATE DEFAULT CURRENT_DATE NOT NULL,
    DUE_DATE DATE NOT NULL,
    RETURN_DATE DATE,
    STATUS VARCHAR2(20) DEFAULT 'BORROWED' NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_BOOK_LOAN FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(ID),
    CONSTRAINT FK_MEMBER_LOAN FOREIGN KEY (MEMBER_ID) REFERENCES LIBRARY_MEMBERS(ID)
);

-- Insert default admin user
INSERT INTO LIBRARY_USERS (USERNAME, PASSWORD, ROLE) 
VALUES ('admin', 'admin123', 'ADMIN');

-- Insert sample books
INSERT INTO BOOKS (TITLE, AUTHOR, ISBN, CATEGORY, QUANTITY) VALUES 
('The Great Gatsby', 'F. Scott Fitzgerald', '9780743273565', 'Fiction', 5),
('To Kill a Mockingbird', 'Harper Lee', '9780446310789', 'Fiction', 3),
('1984', 'George Orwell', '9780451524935', 'Fiction', 4),
('The Pragmatic Programmer', 'Andrew Hunt', '9780201616224', 'Technology', 2),
('Clean Code', 'Robert C. Martin', '9780132350884', 'Technology', 3);

-- Insert sample members
INSERT INTO LIBRARY_MEMBERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE, ADDRESS) VALUES 
('John', 'Doe', 'john.doe@email.com', '123-456-7890', '123 Main St'),
('Jane', 'Smith', 'jane.smith@email.com', '098-765-4321', '456 Oak Ave'),
('Bob', 'Johnson', 'bob.johnson@email.com', '555-555-5555', '789 Pine Rd');

-- Create indexes for better performance
CREATE INDEX IDX_BOOKS_ISBN ON BOOKS(ISBN);
CREATE INDEX IDX_MEMBERS_EMAIL ON LIBRARY_MEMBERS(EMAIL);
CREATE INDEX IDX_BOOK_LOANS_STATUS ON BOOK_LOANS(STATUS);

-- Create a view for active loans
CREATE VIEW ACTIVE_LOANS AS
SELECT 
    bl.ID as LOAN_ID,
    b.TITLE as BOOK_TITLE,
    m.FIRST_NAME || ' ' || m.LAST_NAME as MEMBER_NAME,
    bl.BORROW_DATE,
    bl.DUE_DATE,
    bl.STATUS
FROM BOOK_LOANS bl
JOIN BOOKS b ON bl.BOOK_ID = b.ID
JOIN LIBRARY_MEMBERS m ON bl.MEMBER_ID = m.ID
WHERE bl.STATUS = 'BORROWED';

COMMIT;
